/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_lock {
            bindings = <&tog 4>;
            key-positions = <35 24>;
        };

        combo_release {
            bindings = <&tog 0>;
            key-positions = <11 23 0 12>;
        };

        macro_settings {
            bindings = <&mo 3>;
            key-positions = <39 38>;
        };
    };

    macros {
        macro_parenthesis: macro_parenthesis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
            label = "MACRO_PARENTHESIS";
        };

        macro_brackets: macro_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "MACRO_BRACKETS";
        };

        macro_quote: macro_quotes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp LEFT>;
            label = "MACRO_QUOTES";
        };

        macro_emoji: macro_emoji {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GLOBE &kp E>;
            label = "MACRO_EMOJI";
        };
    };

    behaviors {
        be_command: be_command {
            compatible = "zmk,behavior-tap-dance";
            label = "BE_COMMAND";
            #binding-cells = <0>;
            bindings = <&lt 2 ENTER>, <&tog 2>;
        };

        be_control: be_control {
            compatible = "zmk,behavior-tap-dance";
            label = "BE_CONTROL";
            #binding-cells = <0>;
            bindings = <&lt 1 SPACE>, <&tog 1>;
        };

        be_1or0: be_1or0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BE_1OR0";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_1>, <&kp NUMBER_0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Base";
            bindings = <
&kp LALT   &kp Q  &kp W  &kp E         &kp R                                                &kp T          &kp Y        &kp U          &kp I       &kp O    &kp P     &kp RCTRL
&kp TAB    &kp A  &kp S  &kp D         &kp F                                                &kp G          &kp H        &kp J          &kp K       &kp L    &kp SEMI  &kp SQT
&kp MINUS  &kp Z  &kp X  &kp C         &kp V                                                &kp B          &kp N        &kp M          &kp COMMA   &kp DOT  &kp FSLH  &kp PLUS
                         &kp LEFT_GUI  &mt LEFT_SHIFT RC(C_AC_NEXT_KEYBOARD_LAYOUT_SELECT)  &lt 2 ENTER    &lt 1 SPACE  &kp BACKSPACE  &kp ESCAPE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Lower";
            bindings = <
&trans  &trans  &trans          &kp C_VOLUME_UP    &kp LG(LS(NUMBER_4))  &kp LS(LG(NUMBER_3))    &macro_quote        &kp UP_ARROW  &macro_brackets  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9
&trans  &trans  &kp C_PREVIOUS  &kp C_PLAY         &kp C_NEXT            &kp K_MUTE              &kp LEFT            &kp DOWN      &kp RIGHT        &kp NUMBER_4  &kp N5        &kp NUMBER_6
&trans  &trans  &trans          &kp C_VOLUME_DOWN  &trans                &macro_emoji            &macro_parenthesis  &kp MINUS     &kp EQUAL        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3
                                &trans             &trans                &mo 2                   &trans              &trans        &kp NUMBER_0
            >;
        };

        Raise {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans        &kp PAGE_UP  &trans            &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LA(LEFT)  &kp PAGE_UP  &kt LA(RIGHT)     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans        &trans       &kp LC(UP_ARROW)  &trans  &trans  &kp F11
                        &trans  &trans  &trans    &mo 1         &trans       &trans
            >;

            label = "Raise";
        };

        settings {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &sys_reset  &trans  &trans  &trans  &trans  &bt BT_CLR_ALL
&kp B       &trans        &trans        &trans        &trans        &trans          &trans      &trans  &trans  &trans  &trans  &bootloader
&kp A       &trans        &trans        &trans        &trans        &trans          &trans      &trans  &trans  &trans  &trans  &kp LC(LG(Q))
                                        &trans        &trans        &trans          &trans      &trans  &trans
            >;
        };

        lock {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
